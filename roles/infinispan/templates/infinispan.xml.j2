<infinispan
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="urn:infinispan:config:12.1 https://infinispan.org/schemas/infinispan-config-12.1.xsd
                            urn:infinispan:server:12.1 https://infinispan.org/schemas/infinispan-server-12.1.xsd"
        xmlns="urn:infinispan:config:12.1"
        xmlns:server="urn:infinispan:server:12.1">

{% if jdg_keycloak_cache.enabled or jdg_jgroups_jdbcping %}
   <jgroups>
      <stack-file name="datagrid-jdbcping" path="jgroups-jdbcping.xml"/>
   </jgroups>
{% endif %}

    <cache-container name="default" statistics="true">
{% if jdg_keycloak_cache.enabled or jdg_jgroups_jdbcping %}
      <transport cluster="${infinispan.cluster.name:cluster}" stack="${infinispan.cluster.stack:datagrid-jdbcping}" node-name="${infinispan.node.name:}"/>
{% else %}
      <transport cluster="${infinispan.cluster.name:cluster}" stack="${infinispan.cluster.stack:tcp}" node-name="${infinispan.node.name:}"/>
{% endif %}
      <security>
        <authorization>
          <role name="supervisor" permissions="READ WRITE EXEC CREATE"/>
	    </authorization>
      </security>
    </cache-container>

{% if jdg_keycloak_cache.enabled %}
    <!-- keycloak caches -->
    <cache-container name="keycloak" statistics="true">
{% for keycloak_cache in jdg_keycloak_cache.caches %}
      <replicated-cache name="{{ keycloak_cache }}" mode="SYNC">
        <transaction mode="NONE" locking="PESSIMISTIC"/>
        <locking acquire-timeout="0" />
      </replicated-cache>
{% endfor %}
    </cache-container>
{% endif %}
   <server xmlns="urn:infinispan:server:12.1">
      <interfaces>
         <interface name="public">
             <any-address/>
         </interface>
      </interfaces>

      <socket-bindings default-interface="public" port-offset="${infinispan.socket.binding.port-offset:0}">
         <socket-binding name="default" port="${infinispan.bind.port:11222}"/>
         <socket-binding name="memcached" port="11221"/>
      </socket-bindings>

      <security>
         <credential-stores>
            <credential-store name="credentials" path="credentials.pfx">
               <clear-text-credential clear-text="secret"/>
            </credential-store>
         </credential-stores>
         <security-realms>
            <security-realm name="default">
{% if jdg_default_realm_tls %}
               <server-identities>
                  <ssl>
                     <keystore path="application.keystore"
                               keystore-password="password" alias="server" key-password="password"
                               generate-self-signed-certificate-host="localhost"/>
                  </ssl>
               </server-identities>
{% endif %}              
               <properties-realm groups-attribute="Roles">
                  <user-properties path="users.properties"/>
                  <group-properties path="groups.properties"/>
               </properties-realm>
            </security-realm>
         </security-realms>
      </security>

      <endpoints socket-binding="default" security-realm="default">
        <hotrod-connector name="hotrod"/>
        <rest-connector name="rest">
          <authentication mechanisms="DIGEST BASIC"/>
        </rest-connector>
      </endpoints>
   </server>
</infinispan>
