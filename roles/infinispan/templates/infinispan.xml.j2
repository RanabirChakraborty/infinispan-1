<!-- {{ ansible_managed }} -->
<infinispan
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="urn:infinispan:config:12.1 https://infinispan.org/schemas/infinispan-config-12.1.xsd
                            urn:infinispan:server:12.1 https://infinispan.org/schemas/infinispan-server-12.1.xsd"
        xmlns="urn:infinispan:config:12.1"
        xmlns:server="urn:infinispan:server:12.1">

    <jgroups>
{% if jdg_keycloak_cache.enabled or jdg_jgroups_jdbcping %}
        <!-- TCP local cluster with JDBCPING discovery -->
        <stack name="datagrid" extends="tcp">
            <JDBC_PING  stack.combine="REPLACE" stack.position="MPING"
                connection_url="{{ jdg_jgroups_jdbc[jdg_jdbc_engine].connection_url }}"
                connection_username="{{ jdg_jgroups_jdbc[jdg_jdbc_engine].db_user }}"
                connection_password="{{ jdg_jgroups_jdbc[jdg_jdbc_engine].db_password }}"
                connection_driver="{{ jdg_jgroups_jdbc[jdg_jdbc_engine].driver_class }}"
                initialize_sql="{{ jdg_jgroups_jdbc[jdg_jdbc_engine].initialize_sql }}"
                insert_single_sql="INSERT INTO JGROUPSPING (own_addr, cluster_name, ping_data) values (?, ?, ?)"
                delete_single_sql="DELETE FROM JGROUPSPING WHERE own_addr=? AND cluster_name=?"
                select_all_pingdata_sql="SELECT ping_data FROM JGROUPSPING WHERE cluster_name=?" />
            <FD_SOCK stack.combine="REMOVE"/>
            <pbcast.GMS join_timeout="30000" />
            <RSVP timeout="60000" resend_interval="500" ack_on_delivery="true" />
        </stack>
{% endif %}
{% if jdg_jgroups_relay and jdg_jgroups_jdbcping  %}
        <!-- TCP RELAY with JDBCPING discovery -->
        <stack name="datagridrelay" extends="tcp">
            <JDBC_PING  stack.combine="REPLACE" stack.position="MPING"
                connection_url="{{ jdg_jgroups_jdbc[jdg_jdbc_engine].connection_url }}"
                connection_username="{{ jdg_jgroups_jdbc[jdg_jdbc_engine].db_user }}"
                connection_password="{{ jdg_jgroups_jdbc[jdg_jdbc_engine].db_password }}"
                connection_driver="{{ jdg_jgroups_jdbc[jdg_jdbc_engine].driver_class }}"
                initialize_sql="{{ jdg_jgroups_jdbc[jdg_jdbc_engine].initialize_sql }}"
                insert_single_sql="INSERT INTO JGROUPSPING (own_addr, cluster_name, ping_data) values (?, ?, ?)"
                delete_single_sql="DELETE FROM JGROUPSPING WHERE own_addr=? AND cluster_name=?"
                select_all_pingdata_sql="SELECT ping_data FROM JGROUPSPING WHERE cluster_name=?" />
        </stack>
        <!-- x-site declaration -->
        <stack name="xsite" extends="datagrid">
            <relay.RELAY2 site="{{ jdg_jgroups_relay_site }}" xmlns="urn:org:jgroups" max_site_masters="1000" can_become_site_master="true"
                can_forward_local_cluster="true" relay_multicasts="false" />
            <FORWARD_TO_COORD />
            <remote-sites default-stack="datagridrelay">
{% for site in jdg_jgroups_relay_sites %}
                <remote-site name="{{ site }}"/>
{% endfor %}
            </remote-sites>
        </stack>
{% endif %}
    </jgroups>

    <cache-container name="default" statistics="true">
{% if jdg_jgroups_relay and jdg_jgroups_jdbcping %}
      <transport cluster="{{ jdg_jgroups_relay_site }}" stack="xsite" node-name="{{ inventory_hostname }}"  machine="{{ inventory_hostname }}" site="{{ jdg_jgroups_relay_site }}"/>
{% elif jdg_keycloak_cache.enabled or jdg_jgroups_jdbcping %}
      <transport cluster="datagrid" stack="datagrid" node-name="{{ inventory_hostname }}" machine="{{ inventory_hostname }}"/>
{% else %}
      <transport cluster="datagrid" stack="tcp" node-name="{{ inventory_hostname }}"/>
{% endif %}
      <security>
        <authorization>
          <role name="{{ jdg_supervisor.name }}" permissions="READ WRITE EXEC CREATE"/>
	    </authorization>
      </security>
    </cache-container>

{% if jdg_keycloak_cache.enabled %}
    <!-- keycloak caches -->
    <cache-container name="keycloak" statistics="true">
{% if jdg_jgroups_relay %}
      <transport cluster="{{ jdg_jgroups_relay_site }}" stack="xsite" node-name="{{ inventory_hostname }}"  machine="{{ inventory_hostname }}" site="{{ jdg_jgroups_relay_site }}"/>
      <replicated-cache name="work"/>
{% for keycloak_cache in jdg_keycloak_cache.caches %}
      <distributed-cache name="{{ keycloak_cache }}" mode="SYNC" owners="2" xmlns:jdbc="urn:infinispan:config:store:jdbc:12.0">
{% if jdg_keycloak_persistence %}
        <persistence passivation="false">
           <jdbc:string-keyed-jdbc-store fetch-state="false" shared="true" preload="false">
               <jdbc:data-source jndi-url="jdbc/datasource"/>
               <jdbc:string-keyed-table drop-on-exit="false" create-on-start="true" prefix="DATAGRID">
                   <jdbc:id-column name="id" type="VARCHAR(255)"/>
                   <jdbc:data-column name="datum" type="VARBINARY(4000)"/>
                   <jdbc:timestamp-column name="version" type="BIGINT"/>
                   <jdbc:segment-column name="S" type="INT"/>
               </jdbc:string-keyed-table>
            </jdbc:string-keyed-jdbc-store>
        </persistence>
{% else %}
        <transaction mode="NONE" locking="PESSIMISTIC"/>
        <locking acquire-timeout="0" />
{% endif %}
        <backups>
{% for site in jdg_jgroups_relay_sites %}
{% if site != jdg_jgroups_relay_site %}            <backup site="{{ site }}" strategy="ASYNC"/>
{% endif %}
{% endfor %}
        </backups>
      </distributed-cache>
{% endfor %}
      <security>
        <authorization>
          <role name="{{ jdg_supervisor.name }}" permissions="READ WRITE EXEC CREATE"/>
        </authorization>
      </security>
{% else %}
      <transport cluster="datagrid" stack="datagrid" node-name="{{ inventory_hostname }}" machine="{{ inventory_hostname }}"/>
      <replicated-cache name="work"/>
{% for keycloak_cache in jdg_keycloak_cache.caches %}
      <replicated-cache name="{{ keycloak_cache }}" mode="SYNC">
        <transaction mode="NONE" locking="PESSIMISTIC"/>
        <locking acquire-timeout="0" />
      </replicated-cache>
{% endfor %}
      <security>
        <authorization>
          <role name="{{ jdg_supervisor.name }}" permissions="READ WRITE EXEC CREATE"/>
        </authorization>
      </security>
{% endif %}
    </cache-container>
{% endif %}
   <server xmlns="urn:infinispan:server:12.1">
      <interfaces>
         <interface name="public">
             <any-address/>
         </interface>
      </interfaces>

      <socket-bindings default-interface="public" port-offset="${infinispan.socket.binding.port-offset:0}">
         <socket-binding name="default" port="{{ jdg.port }}"/>
         <socket-binding name="memcached" port="11221"/>
      </socket-bindings>

      <security>
         <credential-stores>
            <credential-store name="credentials" path="credentials.pfx">
               <clear-text-credential clear-text="secret"/>
            </credential-store>
         </credential-stores>
         <security-realms>
            <security-realm name="default">
{% if jdg_default_realm_tls %}
               <server-identities>
                  <ssl>
                     <keystore path="{{ jdg_keystore.path }}"
                               alias="{{ inventory_hostname }}"
                               keystore-password="{{ jdg_keystore.password }}"
{% if jdg_keystore.key_password|length > 0 %}                               key-password="{{ jdg_keystore.key_password }}"
{% endif %}
                     />
                  </ssl>
               </server-identities>
{% endif %}              
               <properties-realm groups-attribute="Roles">
                  <user-properties path="users.properties"/>
                  <group-properties path="groups.properties"/>
               </properties-realm>
            </security-realm>
         </security-realms>
      </security>
{% if jdg_keycloak_persistence %}
      <data-sources>
        <data-source name="KeycloakDS" jndi-name="jdbc/datasource" statistics="true">
          <connection-factory driver="{{ jdg_jgroups_jdbc[jdg_jdbc_engine].driver_class }}"
                              username="{{ jdg_jgroups_jdbc[jdg_jdbc_engine].db_user }}"
                              password="{{ jdg_jgroups_jdbc[jdg_jdbc_engine].db_password }}"
                              url="{{ jdg_jgroups_jdbc[jdg_jdbc_engine].connection_url }}"
                              new-connection-sql="SELECT 1" transaction-isolation="READ_COMMITTED">
          </connection-factory>
          <connection-pool initial-size="1" max-size="10"  min-size="3" background-validation="1000" idle-removal="1" blocking-timeout="1000" leak-detection="10000"/>
        </data-source>
      </data-sources>
{% endif %}
      <endpoints socket-binding="default" security-realm="default">
        <hotrod-connector name="hotrod"/>
        <rest-connector name="rest">
          <authentication mechanisms="DIGEST BASIC"/>
        </rest-connector>
      </endpoints>
   </server>
</infinispan>
