---
- name: Validate parameters
  ansible.builtin.assert:
    that:
      - jdg is defined
      - jdg.home is defined
      - jdg.user is defined
      - jdg.user.name is defined
      - jdg.group is defined
      - jdg.group.name is defined
      - jdg.version is defined
      - jdg.config is defined
      - jdg.config.name is defined
      - jdg.service.name is defined
      - supervisor_password is defined and supervisor_password|length > 0
    quiet: true

- name: Install parameters
  ansible.builtin.debug:
    var: infinispan_installation_path

- name: Install parameters
  ansible.builtin.debug:
    var: jdg

- name: Include prerequisite tasks
  ansible.builtin.include_tasks: prereqs.yml
  tags:
    - prereqs

- name: Include firewall config tasks
  ansible.builtin.include_tasks: firewalld.yml
  when: jdg_configure_firewalld
  tags:
    - firewall

- name: Include install tasks
  ansible.builtin.include_tasks: tasks/install.yml
  tags:
    - install

- name: Install directory
  ansible.builtin.debug:
    msg: "{{ 'Red Hat Datagrid' if jdg_enable else 'Infinispan' }} installed at path {{ jdg.home }}"

- name: Include systemd tasks
  ansible.builtin.include_tasks: tasks/systemd.yml
  tags:
    - systemd

- name: Determine JAVA_HOME for selected JVM RPM  # noqa blocked_modules
  ansible.builtin.shell: |
    set -o pipefail
    rpm -ql {{ jdg_jvm_package }} | grep -Po '/usr/lib/jvm/.*(?=/bin/java$)'
  args:
    executable: /bin/bash
  changed_when: False
  register: rpm_java_home

- name: "Ensure {{ jdg.service.name }} service configuration is deployed: {{ jdg.config.name }}"
  ansible.builtin.template:
    src: server.conf.j2
    dest: "{{ jdg.home }}/bin/server.conf"
    owner: "{{ jdg.user.name }}"
    group: "{{ jdg.group.name }}"
    mode: 0644
    backup: yes
  vars:
    jdg_rpm_java_home: "{{ rpm_java_home.stdout }}"
  notify:
    - restart infinispan

- name: "Ensure {{ jdg.service.name }} server configuration is deployed: {{ jdg.config.name }}"
  ansible.builtin.template:
    src: "{{ jdg.config.template }}"
    dest: "{{ jdg.home }}/server/conf/{{ jdg.config.name }}"
    owner: "{{ jdg.user.name }}"
    group: "{{ jdg.group.name }}"
    mode: 0644
    backup: yes
  notify:
    - restart infinispan

- name: "Ensure {{ jdg.service.name }} log4j2 configuration is deployed"
  ansible.builtin.template:
    src: log4j2.xml.j2
    dest: "{{ jdg.home }}/server/conf/log4j2.xml"
    owner: "{{ jdg.user.name }}"
    group: "{{ jdg.group.name }}"
    mode: 0644
    backup: yes
  notify:
    - restart infinispan

- name: Download database driver jar to target
  ansible.builtin.get_url:
    url: "{{ jdg_jgroups_jdbc[jdg_jdbc_engine].driver_jar_url }}"
    dest: "{{ jdg.home }}/lib/{{ jdg_jgroups_jdbc[jdg_jdbc_engine].driver_jar_filename }}"
    owner: "{{ jdg.user.name }}"
    group: "{{ jdg.group.name }}"
    mode: 0644
  when:
    - jdg_jgroups_jdbcping

- name: Include users tasks
  ansible.builtin.include_tasks: jdg_user.yml
  vars:
    users: "{{ jdg.users }}"
  when:
    - jdg.users is defined
    - jdg.users | length > 0

- name: "Ensure {{ jdg.service.name }} service is running and enabled (first node)"
  ansible.builtin.include_tasks: start.yml
  run_once: yes
  when: jdg_jgroups_jdbcping or jdg_keycloak_persistence

- name: "Ensure {{ jdg.service.name }} service is running and enabled (all nodes)"
  ansible.builtin.include_tasks: start.yml

- name: Link default logs directory
  ansible.builtin.file:
    state: link
    src: "{{ jdg.home }}/server/log"
    dest: "/var/log/infinispan{{ '-' + jdg_nodename if jdg_nodename != inventory_hostname else '' }}"
