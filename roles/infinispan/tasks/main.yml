---
- name: Validate parameters
  ansible.builtin.assert:
    that:
      - jdg is defined
      - jdg.home is defined
      - jdg.user is defined
      - jdg.user.name is defined
      - jdg.group is defined
      - jdg.group.name is defined
      - jdg.version is defined
      - jdg.config is defined
      - jdg.config.name is defined
      - jdg.service.name is defined
      - supervisor_password is defined and supervisor_password|length > 0
    quiet: true

- name: Include prerequisite tasks
  ansible.builtin.include_tasks: prereqs.yml

- name: "Create group {{ jdg.group.name }}"
  ansible.builtin.group:
    name: "{{ jdg.group.name }}"
    state: present
    gid: "{{ jdg.group.id | default(omit) }}"

- name: "Create user {{ jdg.user.name }}"
  ansible.builtin.user:
    name: "{{ jdg.user.name }}"
    state: present
    uid: "{{ jdg.user.id | default(omit) }}"

- name: "Create download directory"
  ansible.builtin.file:
    path: "{{ jdg_app_download_dir }}"
    state: directory
    owner: "{{ jdg.user.name }}"
    group: "{{ jdg.group.name }}"
    mode: 0750

- name: Include install tasks
  ansible.builtin.include_tasks: tasks/install.yml

- name: Installation directory
  ansible.builtin.debug:
    msg: "{{ 'Red Hat Datagrid' if jdg_enable else 'Infinispan' }} installed at path {{ jdg.home }}"

- name: Include systemd tasks
  ansible.builtin.include_tasks: tasks/systemd.yml

- name: Parse declarative cache config to cache xml
  ansible.builtin.set_fact:
    #templated_xml_cache: "{{  }}"
    jdg: "{{ jdg | combine ( { 'static_caches': jdg.static_caches + [item | combine( { 'cache_xml': lookup('template', 'templates/'+item.cache_config.template+'-cache.j2', template_vars=item)|replace('\n', '') }, recursive=True )] } ) }}"
  loop: "{{ jdg.static_caches|flatten(levels=1) }}"
  when: item.cache_xml is not defined

- name: "Ensure {{ jdg.service.name }} configuration is deployed: {{ jdg.config.name }}"
  ansible.builtin.template:
    src: "{{ jdg.config.template }}"
    dest: "{{ jdg.home }}/server/conf/{{ jdg.config.name }}"
    owner: "{{ jdg.user.name }}"
    group: "{{ jdg.group.name }}"
    mode: 0644
    backup: yes
  notify:
    - restart infinispan

- name: "Ensure {{ jdg.service.name }} log4j2 configuration is deployed"
  ansible.builtin.template:
    src: log4j2.xml.j2
    dest: "{{ jdg.home }}/server/conf/log4j2.xml"
    owner: "{{ jdg.user.name }}"
    group: "{{ jdg.group.name }}"
    mode: 0644
    backup: yes
  notify:
    - restart infinispan

- name: Download database driver jar to target
  ansible.builtin.get_url:
    url: "{{ jdg_jgroups_jdbc[jdg_jdbc_engine].driver_jar_url }}"
    dest: "{{ jdg.home }}/lib/{{ jdg_jgroups_jdbc[jdg_jdbc_engine].driver_jar_filename }}"
    owner: "{{ jdg.user.name }}"
    group: "{{ jdg.group.name }}"
    mode: 0644
  when:
    - jdg_jgroups_jdbcping

- name: Include users tasks
  ansible.builtin.include_tasks: jdg_user.yml
  vars:
    users: "{{ jdg.users }}"
  when:
    - jdg.users is defined
    - jdg.users | length > 0

- name: "Ensure {{ jdg.service.name }} service is running and enabled"
  ansible.builtin.systemd:
    name: "{{ jdg.service.name }}"
    state: started
    enabled: yes

- name: Link default logs directory
  ansible.builtin.file:
    state: link
    src: "{{ jdg.home }}/server/log"
    dest: /var/log/infinispan

- name: Flush handlers
  ansible.builtin.meta: flush_handlers

- name: "Wait for used port to be open"
  ansible.builtin.wait_for:
    port: "{{ jdg.port }}"
    delay: 0
  when:
    - jdg_healthcheck
    - jdg.port is defined

- name: Include tasks to validate keycloak remote caches
  ansible.builtin.include_tasks: keycloak.yml
  when:
    - jdg_keycloak_cache.enabled
